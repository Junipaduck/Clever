<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.itwillbs.clever.mapper.ProductMapper">

	<!-- 중고상품등록 INSERT태그 -->
	<insert id="insertProduct"> 
	<selectKey keyProperty="product_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(product_idx), 0) FROM product
	</selectKey>
		INSERT
			INTO product
			VALUES (
				#{product_idx} + 1,
				#{id},
				#{map.product_subject}, 
				#{map.sale_location},
				#{map.product_status},
				#{map.product_price},
				#{map.product_content},
				#{map.product_tag},
				#{map.sale_pay},
				'판매중',
				now(),
				#{map.product_Lcategory},
				#{map.product_Mcategory},
				#{map.product_Scategory}
			)
	</insert>
	
	<!-- 중고상품의 이미지를 file테이블에 INSERT -->
	<insert id="insertFile">
	<selectKey keyProperty="file_idx" resultType="int" order="BEFORE">
			SELECT IFNULL(MAX(file_idx), 0) FROM file
	</selectKey>
		INSERT
			INTO file (file_idx, file_div, file_num, file_name, file_path, file_size, file_exe)
			VALUES (
				#{file_idx} + 1,
				#{file_div},
				#{file_num},
				#{file_name},
				#{file_path},
				#{file_size},
				#{file_exe}
			)
	</insert>


<!-- 	file 테이블의 file_num(= product테이블의 product_idx)의 max값을 select함 -->
	<select id="selectMax" resultType="int">
		SELECT
			MAX(product_idx)
		from
			product;
	</select>
	
	
	<!-- 중고상품 전체 select -->
	<select id="selectProduct" resultType="HashMap">
		SELECT *
			FROM product
			ORDER BY product_idx DESC;
	</select>
	
	
	<!-- 중고상품 특정idx만 select -->
	<select id="selectProductDetail" resultType="HashMap">
		SELECT *
			FROM product
			WHERE product_idx = #{product_idx}
			ORDER BY product_idx DESC;
	</select>
	
	
	<!-- 중고상품 판매자 신고 insert -->
	<insert id="insertProductReport">
		<selectKey keyProperty="report_idx" resultType="int" order="BEFORE">
	 			SELECT IFNULL(MAX(report_idx), 0) FROM report
	 	</selectKey>
		INSERT
			INTO report
			VALUES (
				#{report_idx} + 1
				,#{report_content}
				,1
				,#{product_idx}
				,#{seller_id}
				,#{reporter_id}
				,'product'
			)
	</insert>
	
	
	<!-- 중고상품 같은 카테고리 연관상품 select (소분류를 조회하기에는 너무 적을 것 같아서 중분류로 조회함) -->
	<select id="selectProductSameCategory" resultType="HashMap">
			SELECT
				p.product_idx ,
				p.product_subject ,
				p.product_price,
				p.product_Mcategory,
				f.file_idx,
				f.file_num ,
				f.file_name,
				f.file_path
			FROM
				product p
			JOIN file f on
				p.product_idx = f.file_num
			WHERE 
				product_Mcategory = #{product_Mcategory}
			AND product_idx != #{product_idx}
			AND file_div = 'product'
			AND f.file_idx = (
		        SELECT
		            MIN(file_idx)
		        FROM
		            file
		        WHERE
		            file_num = p.product_idx
		    );
	</select>
	
	
	<!-- 중고상품 메인에 띄워줄 첫번째에 업로드한 사진 select -->
	<select id="selectFile" resultType="HashMap">
		SELECT *
		FROM file f 
			WHERE file_idx in 
				(SELECT MIN(file_idx) AS file_idx
					FROM file
						WHERE file_div = 'product'
							GROUP BY file_num);
	</select>
	
	
	<!-- 중고상품 이미지 모두 select -->
	<select id="selectFiles" resultType="HashMap">
		SELECT * FROM file f WHERE file_div = 'product';
	</select>
	
	<!-- 0613배하나 추가 sId의 관심카테고리 select -->
	<select id="selectMemberInterest" resultType="String">
	 	SELECT member_interest from member where member_id = #{sId}
	</select>
	
	<!-- 0613배하나 추가 sId의 관심카테고리와 같은 상품들 select -->
	<select id="selectIntCtgr" resultType="HashMap">
		SELECT product_Mcategory, product_idx, product_subject, product_price, sale_status
			FROM product
			where product_Mcategory = #{selectMemberInterest} 
	</select>
	
	<!-- 판매자정보 select -->
	<select id="sellerInfoCount" resultType="String">
		SELECT
			count(product_idx) as 'count'
		from
			product
		where
			member_id IN (select member_id from product where product_idx = #{product_idx})
	</select>
	
	<!-- 중고상품 수정하기 update -->
	<update id="updateProduct">
		UPDATE
			product
		set
			product_subject = #{product_subject}
			,sale_location = #{sale_location}
			,product_status = #{product_status}
			,product_price = #{product_price}
			,product_content = #{product_content}
			,product_Lcategory = #{product_Lcategory}
			,product_Mcategory = #{product_Mcategory}
			,product_Scategory = #{product_Scategory}
		where
			product_idx = #{product_idx};
	</update>
	
	
	<!-- 중고상품 파일삭제-->
	<delete id="deleteProductFile">
		DELETE FROM file WHERE file_num = #{product_idx} AND file_div = 'product'
	</delete>
	
	<!-- 중고상품 삭제하기 -->
	<delete id="deleteProduct">
		DELETE FROM product WHERE product_idx = #{product_idx}
	</delete>
	
	<!-- 찜했는지 가져오는 select -->
	<select id="selectDibsCheck" resultType="com.itwillbs.clever.vo.DibsVO">
	SELECT dibs_check
		FROM dibs
		WHERE dibs_type = #{dibs_type} AND type_num = #{type_num} AND member_id = #{member_id}; 
	</select>

	<!-- 찜 추가 -->
	<insert id="insertDibs">
	<selectKey keyProperty="dibs_idx" resultType="int" order="BEFORE">
	 			SELECT IFNULL(MAX(dibs_idx), 0) FROM dibs
	</selectKey>
	INSERT
		INTO dibs
		VALUES
		(
		#{dibs_idx} + 1
		, #{dibs_type}
		, #{type_num}
		, #{member_id}
		, 1
		)
	</insert>

	<!-- 찜 삭제 -->
	<delete id="deleteDibs">
	DELETE
		FROM dibs
		WHERE dibs_type = #{dibs_type} AND type_num = #{type_num} AND member_id = #{member_id}; 
	</delete>
	
	
	<!-- 카테고리 관련 (7개) -->
	<select id="getProductList" resultType="map">
		SELECT *
			FROM product
				WHERE product_Lcategory = #{param} or product_Mcategory = #{param} or product_Scategory = #{param}
	</select>
	
	<select id="getBigCategory" resultType="string">
		SELECT DISTINCT bigCategory FROM category WHERE bigCategory = #{param}
	</select>
	
	<select id="getMidCategory" resultType="map">
		SELECT DISTINCT midCategory , bigCategory FROM category WHERE midCategory = #{param}
	</select>
	
	<select id="getSmallCategory" resultType="map">
		SELECT DISTINCT smallCategory , midCategory , bigCategory FROM category WHERE smallCategory = #{param}
	</select>
	
	<select id="getBigCategorys" resultType="map">
		SELECT DISTINCT bigCategory FROM category
	</select>
	
	<select id="getMidCategorys" resultType="map">
		SELECT
		 	DISTINCT midCategory
		  		FROM category
		  			WHERE bigCategory = IFNULL((SELECT DISTINCT bigCategory  FROM category c WHERE midCategory = #{param}),IFNULL((SELECT DISTINCT bigCategory  FROM category c WHERE smallCategory = #{param}),#{param}) );
	</select>
	
	<select id="getSmallCategorys" resultType="map">
		SELECT
		 	DISTINCT smallCategory
		 		 FROM category c
		  			 WHERE midCategory = IFNULL((SELECT DISTINCT midCategory  FROM category c WHERE midCategory = #{param}),(SELECT DISTINCT midCategory  FROM category c WHERE smallCategory = #{param}))
	</select>
	<!-- // 카테고리 관련 (7개) -->
	
	<!-- 중고상품 검색 -->
	<select id="selectProductSearch" resultType="map">
		SELECT *
			FROM product
				WHERE product_subject LIKE '%${product_search }%'
	</select>
	
	<!-- 0614 보아 시작!!!!!!!!!!!! -->
	<!-- 메인화면 상품조회 -->
	<select id="selectDibsProduct" resultType="map">
		SELECT 
				p.*
			FROM 
				dibs d
			JOIN 
				product p 
				ON d.type_num = p.product_idx
			WHERE 
				d.dibs_type = 'product'
			GROUP BY 
				p.product_idx
			ORDER BY 
				COUNT(*) DESC;
	</select>
	
	<!-- 상품구매시 판매상품 sale_status 업데이트 -->
	<update id="updateSaleStatus">
		UPDATE 
				product 
			SET 
				sale_status = '판매완료' 
			WHERE 
				product_idx = #{product_idx}
	</update>
	
	<!-- 상품구매시 구매자 계좌 출금 -->
	<update id="buyerWithdraw">
		UPDATE 
				member 
			SET 
				member_balance = member_balance - #{product_price} 
			WHERE 
				member_id = #{sId}
	</update>
	<insert id="depositAdMoney">
		<selectKey keyProperty="admin_account_balance" resultType="int" order="BEFORE">
<!-- 	 			SELECT IFNULL(MAX(admin_account_idx), 0) FROM admin_account -->
			SELECT admin_account_balance FROM admin_account ORDER BY admin_account_idx DESC LIMIT 1;
		</selectKey>
		INSERT 
			INTO admin_account 
			VALUES(
				null
				,#{sId}
				,#{product_price}
				,'d'
				,now()
				,#{admin_account_balance} + #{product_price}
			)
	</insert>
	
	<!-- 구매확정 버튼 눌렀을 때, 관리자계좌 테이블에 출금 insert -->
	<insert id="withdrawAdMoney">
		<selectKey keyProperty="admin_account_balance" resultType="int" order="BEFORE">
			SELECT admin_account_balance FROM admin_account ORDER BY admin_account_idx DESC LIMIT 1;
		</selectKey>
		INSERT 
			INTO admin_account 
			VALUES(
				null
				,#{buy_seller}
				,#{buy_price}
				,'w'
				,now()
				,#{admin_account_balance} - #{buy_price}
			)
	</insert>	
	
	<!-- 구매확정시 판매자에게 돈 입금 -->
	<update id="buyerDeposit">
		UPDATE 
				member 
			SET 
				member_balance = member_balance + #{buy_price}
			WHERE 
				member_id = #{buy_seller}
	</update>
	<update id="updateMemAdMoney">
		UPDATE 
				member 
			SET 
				member_balance = member_balance + #{product_price} 
			WHERE 
				member_id = 'admin'
	</update>
	
	<!-- 결제페이지에서 회원정보 조회 -->
	<select id="selectMemberInfo" resultType="map">
		SELECT *
			FROM member
			WHERE member_id = #{sId}
	</select>
	
	<!-- 메인화면 상품조회 -->
<!-- 	<select id="selectMainProduct" parameterType="java.util.ArrayList" resultType="map"> -->
<!-- 		SELECT * -->
<!-- 			FROM -->
<!-- 				product -->
<!-- 			WHERE product_idx IN ( -->
<!-- 				<foreach collection="array" item="item" index="index" separator=","> -->
<!-- 					${item} -->
<!-- 				</foreach> -->
<!-- 			) -->
				
			
			
<!-- 	</select> -->
	
	
</mapper> <!-- 매퍼끝 -->













